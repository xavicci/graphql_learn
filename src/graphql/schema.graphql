type Query {
  hello: String!
  getPerson(name: String, age: Int): String
  getInt(age: Int!): Int
  getFloat(price: Float): Float
  getString: String
  getBoolean: Boolean
  getID: ID
  getNumbers(numbers:[Int!]!):[Int]
  # products
  product(id: ID!): Product
  allProducts: [Product!]!
}

type Product {
  id: ID!
  name: String!
  price: Float!
  description: String!
  image: String!
  createAt: String!
  categoryId:ID!
  category: Category!

}
type Category {
  id: ID!
  name:String!
  image:URL!
}

type Mutation {
  login(email: EmailAddress!, password: String!):AuthResponse
  addProduct(dto: CreateProductDto!): Product
  updateProduct(id: ID!, dto:UpdateProductDto!):Product
  deleteProduct(id: ID!):ID
  addCategory(dto:CreateCategoryDto): Category
}

input CreateProductDto {
  name: String!
  price: Int!
  description: String!
  image: String!
  categoryId: ID!
}
input UpdateProductDto {
  name: String
  price: Int
  description: String
  image: String
  categoryId: ID
}

type AuthResponse {
  access_token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  role:String!
  createdAt: String!
}
input CreateCategoryDto {
  name: CategoryNameType!
  image: String!
}

scalar CategoryNameType
